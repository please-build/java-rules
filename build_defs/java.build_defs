"""Built-in rules to compile Java code."""

def java_library(name:str, srcs:list=None, src_dir:str=None, resources:list=[], resources_root:str=None,
                 deps:list=[], modular:bool=False, exported_deps:list=None, visibility:list=None,
                 test_only:bool&testonly=False, javac_flags:list&javacopts=[], labels:list=[],
                 toolchain:str=CONFIG.JAVA.TOOLCHAIN):
    """Compiles Java source to a .jar which can be collected by other rules.

    Args:
      name (str): Name of the rule
      srcs (list): Java source files to compile for this library
      src_dir (str): Directory containing Java source files to compile.
      resources (list): Resources to include in the .jar file
      resources_root (str): Root directory to treat resources relative to; ie. if we are in
                            //project/main/resources and resources_root is project/main then
                            the resources in the .jar will be in the subdirectory 'resources'.
      deps (list): Dependencies of this rule.
      modular (bool): Whether the produced file should be modular. Only supported with java 9+.
      exported_deps (list): Exported dependencies, ie. dependencies that other things depending on this
                            rule will also receive when they're compiling. This is quite important for
                            Java; any dependency that forms part of the public API for your classes
                            should be an exported dependency.
      visibility (list): Visibility declaration of this rule.
      test_only (bool): If True, this rule can only be depended on by tests.
      javac_flags (list): List of flags passed to javac.
      labels (list): Additional labels to apply to this rule.
      toolchain (str): A label identifying a java_toolchain rule which will be used to build this java library.
    """
    resources_cmd = 'true'
    if resources:
        if resources_root:
            resources_cmd = f'$(for SRC in $SRCS_RESOURCES; do DEST=${SRC#"{resources_root}"};mkdir -p $(dirname "_tmp/$DEST");cp "$SRC" "_tmp/$DEST"; done)'
        else:
            resources_cmd = '$(for SRC in $SRCS_RESOURCES; do mkdir -p $(dirname "_tmp/$SRC");cp "$SRC" "_tmp/$SRC"; done)'

    if srcs and src_dir:
        fail('You cannot pass both srcs and src_dir to java_library')
    if srcs or src_dir:
        if javac_flags:
            # See http://bazel.io/blog/2015/06/25/ErrorProne.html for more info about this flag;
            # it doesn't mean anything to us so we must filter it out.
            javac_flags = filter(lambda flag: flag != "-extra_checks:off", javac_flags)
        else:
            if test_only and CONFIG.JAVA.JAVAC_TEST_FLAGS is not None:
                javac_flags = [CONFIG.JAVA.JAVAC_TEST_FLAGS]
            elif CONFIG.JAVA.JAVAC_FLAGS is not None:
                javac_flags = [CONFIG.JAVA.JAVAC_FLAGS]

        javac_flags = ["-g", "-encoding utf8"] + javac_flags

        source_level = CONFIG.JAVA.SOURCE_LEVEL
        target_level = CONFIG.JAVA.TARGET_LEVEL
        release_level = CONFIG.JAVA.RELEASE_LEVEL
        if release_level:
            javac_flags = [f"--release {release_level}"] + javac_flags
        else:
            javac_flags = [f"-source {source_level}", f"-target {target_level}"] + javac_flags

        javac = CONFIG.JAVA.JAVAC_TOOL

        # Override old config if we have a toolchain configured
        if toolchain:
            javac = f'{toolchain}|javac'

        find = f'find "$TMP_DIR" -name "*.jar"'
        if toolchain:
            find += f' -not -path "$TMP_DIR/$(location {toolchain})/*"'

        srcflag = '`find $SRCS_JAVAC -name "*.java"`' if src_dir else '$SRCS_JAVAC'
        javac_flags = " ".join(javac_flags)
        javac_cmd = f'mkdir -p _tmp/META-INF && "$TOOLS_JAVAC" {javac_flags} -classpath .:`{find} | tr \\\\\\\\n :` -d _tmp {srcflag}'


        cmd = ' && '.join([
            javac_cmd,
            'find _tmp -name "*.class" | sed -e "s|_tmp/|${PKG} |g" -e "s/\\.class/.java/g" | sort > _tmp/META-INF/please_sourcemap',
            resources_cmd,
            'cd _tmp',
            '"$TOOLS_JARCAT" z -d -o "$OUT" -i .',
        ])

        src_dir_label = [] if srcs else ['src_dir:'+src_dir]

        return build_rule(
            name=name,
            srcs={
                # To ensure we don't pass the resources to the compiler,
                # this key has to match the magic constant in build_step.go
                'JAVAC': srcs or [src_dir],
                'RESOURCES': resources,
            },
            deps=deps,
            exported_deps=exported_deps,
            outs=[name + '.jar'],
            visibility=visibility,
            cmd=cmd,
            building_description="Compiling...",
            requires=['java'],
            labels = labels + ['rule:java_test_library' if test_only else 'rule:java_library'] + src_dir_label,
            test_only=test_only,
            tools={
                'javac': [javac],
                'jarcat': [CONFIG.JARCAT_TOOL],
            },
        )
    elif resources:
        # Can't run javac since there are no java files.
        if resources_root:
            cmd = 'cd ${PKG_DIR}/%s && $TOOL z -d -o ${OUT} -i .' % resources_root
        else:
            cmd = '$TOOL z -d -o ${OUTS} -i .'
        return build_rule(
            name=name,
            srcs=resources,
            deps=deps,
            exported_deps=exported_deps,
            outs=[name + '.jar'],
            visibility=visibility,
            cmd=cmd,
            building_description="Linking...",
            requires=['java'],
            labels = labels + ['rule:test_resources' if test_only else 'rule:resources'],
            test_only=test_only,
            tools=[CONFIG.JARCAT_TOOL],
        )
    else:
        # If input is only jar files (as maven_jar produces in some cases) we simply collect them
        # all up for other rules to use.
        return filegroup(
            name=name,
            deps=deps,
            exported_deps=exported_deps,
            visibility=visibility,
            output_is_complete=False,
            requires=['java'],
            labels = labels,
            test_only=test_only,
        )


def java_module(name:str, srcs:list=None, src_dir:str=None, resources:list=None, resources_root:str=None,
                deps:list=None, visibility:list=None, test_only:bool&testonly=False, javac_flags:list&javacopts=None,
                toolchain:str=CONFIG.JAVA.TOOLCHAIN):
    """Compiles Java source to a modular .jar which can be collected by other rules.

    Args:
      name (str): Name of the rule
      srcs (list): Java source files to compile for this library
      src_dir (str): Directory containing Java source files to compile.
      resources (list): Resources to include in the .jar file
      resources_root (str): Root directory to treat resources relative to; ie. if we are in
                            //project/main/resources and resources_root is project/main then
                            the resources in the .jar will be in the subdirectory 'resources'.
      deps (list): Dependencies of this rule.
      exported_deps (list): Exported dependencies, ie. dependencies that other things depending on this
                            rule will also receive when they're compiling. This is quite important for
                            Java; any dependency that forms part of the public API for your classes
                            should be an exported dependency.
      visibility (list): Visibility declaration of this rule.
      test_only (bool): If True, this rule can only be depended on by tests.
      javac_flags (list): List of flags passed to javac.
      toolchain (str): A label identifying a java_toolchain rule which will be used to build this java module.
    """
    return java_library(
        name = name,
        srcs = srcs,
        src_dir = src_dir,
        resources = resources,
        resources_root = resources_root,
        deps = deps,
        visibility = visibility,
        test_only = test_only,
        javac_flags = javac_flags,
        modular = True,
        toolchain = toolchain,
    )


def java_runtime_image(name:str, out:str=None, modules:list, launcher_module:str&main_module=None,
                       launcher_class:str&main_class=None, compression:int=2, strip_hdrs:bool=True,
                       strip_man_pages:bool=True, jlink_args:str="", data:list=None,
                       toolchain:str=CONFIG.JAVA.TOOLCHAIN, visibility:list=None, deps:list=[]):
    """Assembles a set of modules into an executable java runtime image.

    Args:
      name (str): Name of the rule.
      out (str): Name of the folder that contains the runtime image and the binary contained by it. Defaults to 'name'.
      modules (list): Modules to be included in the runtime image.
      launcher_module (str): The module to run in the launcher script. Has to be included in 'modules'. If omitted, no
                             launcher script will be created.
      launcher_class (str): The class within 'launcher_module' to run in the launcher script. Must be specified if
                            'launcher_module' is specified.
      compression (int): the compression method to apply to resources. Refer to the jlink documentation for --compress
                         for permitted values. Defaults to 2 (zip).
      strip_hdrs (bool): Strip header files from runtime image. Defaults to True, since they are usually not needed at
                         run time.
      strip_man_pages (bool): Strip man pages from runtime image. Defaults to True.
      jlink_args (str): Additional arguments to pass to jlink.
      data (list): Deprecated, has no effect.
      toolchain (str): The build target for a java_toolchain that will be used to build this image. If a toolchain is
                       not defined, this rule falls back to using the jlink tool defined in the plugin configuration.
      visibility (list): Visibility declaration of this rule.
      deps (list): Dependencies of this rule.
    """
    if toolchain:
        home = "$TOOLS_TOOLCHAIN"
        tools = {
            "jlink": f"{toolchain}|jlink",
            "toolchain": toolchain,
        }
    else:
        if CONFIG.JAVA.HOME is None:
            fail("JAVA_HOME needs to be set to link Java runtime images against jmods.")
        if CONFIG.JAVA.JLINK_TOOL is None:
            fail("A jlink tool is required to build Java runtime images.")
        home = CONFIG.JAVA.HOME
        tools = {
            "jlink": CONFIG.JAVA.JLINK_TOOL,
        }

    if not modules:
        fail("You cannot assemble a Java runtime image without specifying any modules.")
    if (launcher_module and not launcher_class) or (launcher_class and not launcher_module):
        fail("launcher_module and launcher_class must be defined together - they cannot be defined individually.")
    out = out or name
    depflags = r'`find "$TMP_DIR" -name "*.jar" | tr \\\\n :`'
    modules = ','.join(modules)
    default_jlink_args = [
        f"--module-path {depflags}:{home}/jmods",
        f"--add-modules {modules}",
        f"--compress {compression}",
        f"--output {out}",
    ]
    if launcher_module and launcher_class:
        default_jlink_args += [f"--launcher {name}={launcher_module}/{launcher_class}"]
    if strip_hdrs:
        default_jlink_args += ["--no-header-files"]
    if strip_man_pages:
        default_jlink_args += ["--no-man-pages"]

    return build_rule(
        name=name,
        deps=deps,
        outs=[out],
        cmd={
            "dbg": "$TOOLS_JLINK " + " ".join(default_jlink_args) + f" {jlink_args}",
            "opt": "$TOOLS_JLINK " + " ".join(default_jlink_args) + f" --strip-debug {jlink_args}",
        },
        needs_transitive_deps=True,
        output_is_complete=True,
        binary=True,
        building_description="Creating runtime image...",
        requires=['java'],
        visibility=visibility,
        tools=tools,
    )

def java_binary(name:str, main_class:str=None, out:str=None, srcs:list=None, deps:list=[],
                data:list=[], visibility:list=None, jvm_args:str=None, labels:list=[],
                self_executable:bool=True, manifest:str=None, toolchain:str=CONFIG.JAVA.TOOLCHAIN):
    """Compiles a .jar from a set of Java libraries.

    Args:
      name (str): Name of the rule.
      main_class (str): Main class to set in the manifest.
      out (str): Name of output .jar file. Defaults to name + .jar.
      srcs (list): Source files to compile.
      deps (list): Dependencies of this rule.
      data (list): Runtime data for this rule.
      visibility (list): Visibility declaration of this rule.
      jvm_args (str): Arguments to pass to the JVM in the run script.
      labels (list): any labels to apply to this rule.
      self_executable (bool): True to make the jar self executable.
      manifest (str): Manifest file to put into the jar. Can't be passed at the same time as
                      main_class.
      toolchain (str): A label identifying a java_toolchain rule which will be used to build this Java binary.
    """
    if main_class and manifest:
        fail("Can't pass both main_class and manifest to java_binary")
    if srcs:
        lib_rule = java_library(
            name = f'_{name}#lib',
            srcs = srcs,
            deps = deps,
            toolchain = toolchain,
        )
        deps += [lib_rule]
    # TODO(jpoole): Remove self exec flag and do this always once JavaBinaryExecutableByDefault has been merged
    if self_executable:
        if CONFIG.JAVA.RUN_SELF_EXECUTABLES_WITH_JAVA_TOOL:
            if toolchain:
                java = f"$(out_location {toolchain}|java)"
                data += [f"{toolchain}|java"]
            else:
                java = CONFIG.JAVA.JAVA_TOOL
        else:
            java = "java"
        preamble = "#!/bin/sh\nexec %s %s -jar $0 ${@}" % (java, (jvm_args or ""))
        cmd, tools = _jarcat_cmd(main_class, preamble, manifest=manifest)
    else:
        # This is essentially a hack to get past some Java things (notably Jersey) failing
        # in subtle ways when the jar has a preamble (srsly...).
        cmd, tools = _jarcat_cmd(main_class, manifest=manifest)
    return build_rule(
        name=name,
        deps=deps,
        outs=[out or name + '.jar'],
        srcs=[manifest],
        data=data,
        cmd=cmd,
        needs_transitive_deps=True,
        output_is_complete=True,
        binary=self_executable,
        building_description="Creating jar...",
        requires=['java'],
        visibility=visibility,
        tools=tools,
        labels=labels if self_executable else ['java_non_exe'] + labels,
    )


def java_test(name:str, srcs:list, resources:list=None, resources_root:str=None,
              data:list|dict=[], deps:list=None, labels:list&features&tags=[], visibility:list=None, flags:str='',
              sandbox:bool=None, timeout:int=0, flaky:bool|int=0, test_outputs:list=None, size:str=None,
              test_package:str=CONFIG.JAVA.DEFAULT_TEST_PACKAGE, jvm_args:str='', toolchain:str=CONFIG.JAVA.TOOLCHAIN):
    """Defines a Java test.

    Args:
      name (str): Name of the rule.
      srcs (list): Java files containing the tests.
      resources (list): Resources to include in the .jar file
      resources_root (str): Root directory to treat resources relative to; ie. if we are in
                            //project/main/resources and resources_root is project/main then
                            the resources in the .jar will be in the subdirectory 'resources'.
      data (list): Runtime data files for this rule.
      deps (list): Dependencies of this rule.
      labels (list): Labels to attach to this test.
      visibility (list): Visibility declaration of this rule.
      flags (str): Flags to pass to the test invocation.
      sandbox (bool): Sandbox the test on Linux to restrict access to namespaces such as network.
      timeout (int): Maximum length of time, in seconds, to allow this test to run for.
      flaky (int | bool): True to mark this as flaky and automatically rerun.
      test_outputs (list): Extra test output files to generate from this test.
      size (str): Test size (enormous, large, medium or small).
      test_package (str): Java package to scan for test classes to run.
      jvm_args (str): Arguments to pass to the JVM in the run script.
      toolchain (str): A label identifying a java_toolchain rule which will be used to run this java test.
    """
    lib_rule = java_library(
        name=f'_{name}#lib',
        srcs=srcs,
        resources=resources,
        resources_root=resources_root,
        deps=deps,
        test_only=True,
        labels=labels + ["rule:java_test"],
        toolchain = toolchain,
        # Deliberately not visible outside this package.
    )
    # As above, would be nicer if we could make the jars self-executing again.
    cmd, tools = _jarcat_cmd('build.please.main.TestMain')
    tools['junit'] = [CONFIG.JAVA.JUNIT_RUNNER]

    if toolchain:
        java = f'{toolchain}|java'
    else:
        java = CONFIG.JAVA.JAVA_TOOL

    test_package_arg = "-Dbuild.please.testpackage={test_package}" if test_package is not None else ""

    cmd = 'ln -s "$(if [ -f "$TOOLS_JUNIT" ]; then echo "$TOOLS_JUNIT"; else echo "$(which "$TOOLS_JUNIT")"; fi)" . && ' + cmd
    test_cmd = f"$TOOLS_JAVA {test_package_arg} {jvm_args} -jar $(location :{name}) {flags}"

    deps = [lib_rule]
    return build_rule(
        name=name,
        cmd=cmd,
        test_cmd=test_cmd,
        test_tools= {"JAVA": [java]},
        data=data,
        outs=[name + '.jar'],
        deps=deps,
        visibility=visibility,
        test_sandbox=sandbox,
        labels=labels + ['test_results_dir'],
        test_timeout=timeout,
        size = size,
        flaky=flaky,
        test_outputs=test_outputs,
        requires=['java', 'test'],
        needs_transitive_deps=True,
        output_is_complete=True,
        test=True,
        binary=True,
        building_description="Creating jar...",
        tools=tools,
    )


def maven_jar(name:str, id:str, repository:str|list=None, labels:list=[], hash:str=None, hashes:list=None,
              source_hashes:list|str=None, deps:list=None, visibility:list=None, filename:str=None,
              sources:bool=True, licences:list=None, native:bool=False, artifact_type:str=None,
              test_only:bool&testonly=False, binary:bool=False, classifier:str='', classifier_sources_override:str=''):
    """Fetches a single Java dependency from Maven.

    Args:
      name (str): Name of the output rule.
      id (str): Maven id of the artifact (eg. org.junit:junit:4.1.0)
      repository (str | list): Maven repositories to fetch deps from.
      labels (list): Additional labels to apply to this rule.
      hash (str): Hash for produced rule.
      hashes (list): List of hashes downloaded classes jar.
      source_hashes (list): List of hashes for the downloaded sources jar.
      deps (list): Labels of dependencies, as usual.
      visibility (list): Visibility label.
      filename (str): Filename we attempt to download. Defaults to standard Maven name.
      sources (bool): True to download source jars as well.
      licences (list): Licences this package is subject to.
      native (bool): Attempt to download a native jar (i.e. add "-linux-x86_64" etc to the URL).
      artifact_type (str): Type of artifact to download (defaults to jar but could be e.g. aar).
      test_only (bool): If True, this target can only be used by tests or other test_only rules.
      binary (bool): If True, we attempt to fetch and download an executable binary. The output
                     is marked as such. Implies native=True and sources=False.
      classifier (str): Maven classifier, allows to distinguish artifacts that were built from
                     the same POM but differ in their content.
      classifier_sources_override (str): Allows to override the classifier used to fetch the
                     source artifact.
                     e.g. logback-core-1.1.3-tests.jar and logback-core-1.1.3-test-sources.jar
    """
    if hash and hashes:
        fail('You can pass only one of hash or hashes to maven_jar')

    hashes = hashes if hashes else [hash] if hash else None

    if not artifact_type:
        id, _, artifact_type = id.partition('@')
        artifact_type = artifact_type or 'jar'
    group, artifact, version, sources, licences = _parse_maven_artifact(id, sources, licences)
    artifact_type = '.' + artifact_type
    out_artifact_type = artifact_type
    repository = repository or CONFIG.JAVA.MAVEN_REPO
    repos = [repository] if isinstance(repository, str) else repository
    if classifier:
        classifier = '-' + classifier
    if binary:
        native = True
        sources = False
        artifact_type = '.exe'  # Maven always describes them this way, even for Linux :(
        out_artifact_type = ''  # But we're not peasants so we won't do the same.
    if native:
        filename = filename or f'{artifact}-{version}-{classifier}$XOS-$XARCH{artifact_type}'
    else:
        filename = filename or f'{artifact}-{version}{classifier}{artifact_type}'

    group = group.replace('.', '/')
    urls = ['/'.join([repo, group, artifact, version, filename]) for repo in repos]
    bin_rule  =  remote_file(
        name = name,
        _tag = 'bin',
        url = urls,
        out = name + out_artifact_type,
        labels = ['maven-classes'],
        licences = licences,
        exported_deps = deps,  # easiest to assume these are always exported.
        test_only = test_only,
        binary = binary,
        hashes = hashes,
    )
    provides = {'java': bin_rule}
    srcs = [bin_rule]

    if sources:
        if classifier_sources_override:
            classifier = '-' + classifier_sources_override
        filename = f'{artifact}-{version}{classifier}-sources.jar'
        urls = ['/'.join([repo, group, artifact, version, filename]) for repo in repos]
        src_rule = remote_file(
            name = name,
            _tag = 'src',
            url = urls,
            out = filename,
            labels = ['maven-sources'],
            licences = licences,
            test_only = test_only,
            hashes = source_hashes,
        )
        srcs += [src_rule]

    # .aar's have an embedded classes.jar in them. Pull that out so other rules can use it.
    if artifact_type == '.aar':
        classes_rule = build_rule(
            name = name,
            tag = 'classes',
            srcs = [bin_rule],
            cmd = '$TOOL x $SRC classes.jar',
            outs = [name + '.jar'],
            visibility = visibility,
            licences = licences,
            requires = ['java'],
            exported_deps = deps,
            test_only=test_only,
            tools = [CONFIG.JARCAT_TOOL],
        )
        provides = {
            'java': classes_rule,
            'android': bin_rule,
        }
        local_deps = [classes_rule]
    else:
        local_deps = None

    return filegroup(
        name = name,
        srcs = srcs,
        provides = provides,
        exported_deps=deps,  # easiest to assume these are always exported.
        deps = local_deps,  # ensure the classes_rule gets built correctly if there is one.
        labels = labels + ['mvn:' + id, 'rule:maven_jar'],
        visibility = visibility,
        licences = licences,
        test_only=test_only,
        output_is_complete = False,
        binary = binary,
    )


def _parse_maven_artifact(id, sources=True, licences=None):
    """Parses a Maven artifact in group:artifact:version format, with possibly some extras."""
    parts = id.split(':')
    if len(parts) == 5:
        group, artifact, version = parts[:3]
        sources = parts[3] == 'src'
        licences = parts[4].split('|')
    elif len(parts) == 4:
        group, artifact, version = parts[:3]
        sources = parts[3] == 'src'
    elif len(parts) == 3:
        group, artifact, version = parts
    else:
        fail(f'Unknown artifact format: {id} (should be group:artifact:version)')
    return group, artifact, version, sources, licences


def _jarcat_cmd(main_class=None, preamble=None, manifest=None):
    """Returns the command we'd use to invoke jarcat, and the tool paths required."""
    cmd = '$TOOLS_JARCAT z -i . -o ${OUTS} -j'
    if main_class:
        cmd += f' -m "{main_class}"'
    if preamble:
        cmd += f" -p '{preamble}'"
    if manifest:
        cmd += ' --manifest "$SRCS"'
    return cmd, {'jarcat': [CONFIG.JARCAT_TOOL]}

# This function is exposed as java_toolchain unless Bazel compatibility is enabled in which case it is exposed as
# please_java_toolchain. This is to avoid namespace conflicts with Bazel's java_toolchain rule.
def _java_toolchain(name:str, jdk_url:str|dict="", jdk:str="", hashes:list=[], jmod_includes:dict={},
                    visibility:list=["PUBLIC"]) -> str:
    """Downloads the JDK so language rules can use the toolchain"""
    if jdk_url and jdk:
        fail("Either jdk or jdk_url should be provided but not both")

    if not jdk:
        jdk_url = jdk_url if isinstance(jdk_url, str) else jdk_url.get(CONFIG.OS)

        if not jdk_url:
            fail(f"No jdk_url defined for platform {CONFIG.OS}")

        jdk = remote_file(
            name=f"_{name}#download",
            url = jdk_url,
            visibility = visibility,
            hashes = hashes,
        )

    if CONFIG.OS == "linux" or CONFIG.OS == "darwin" or CONFIG.OS == "freebsd" or CONFIG.OS == "openbsd" or CONFIG.OS == "solaris":
        java_platform = CONFIG.OS
    elif CONFIG.OS == "windows":
        java_platform = "win32"

    include_root = join_path(subrepo_name(), package_name(), name, "include")
    labels = ["cc:inc:" + include_root]
    if java_platform:
        labels += ["cc:inc:" + join_path(include_root, java_platform)]

    # The jlink binary was added to the JDK in Java 9, as part of the module system - it can only be
    # added as an entry point if we detect that the toolchain will provide Java >= 9.
    def _add_jlink_entry_point(name, output):
        # The output of "java -fullversion" matches the format expected below going back at least as
        # far as Java 8.
        if len(output) == 0 or not output[0].startswith("openjdk full version "):
            fail("bin/java in the Java toolchain does not appear to be the JRE binary")
        version = output[0].removeprefix('openjdk full version "').removesuffix('"')
        # "java -fullversion" outputs the value of the java.runtime.version JVM system property,
        # whose format has changed through the ages:
        if version.startswith("1."):
            # Java <= 8: JDK version numbers always have an initial "1" component, the (de facto)
            # major version number is second, and the third is always "0". Everything that follows
            # this is irrelevant here.
            _, major, _ = version.split(".")
        else:
            # Java >= 9: java.runtime.version is the value of $VSTR, defined in JEP 223. We just
            # want the value of $MAJOR, the first component of $VNUM.
            vnum_pre, _, _ = version.partition("+")
            vnum, _, _ = vnum_pre.partition("-")
            major, _, _ = vnum.partition(".")
        if int(major) >= 9:
            add_entry_point(name, "jlink", f"{name}/bin/jlink")

    srcs = {
        "jdk": [jdk],
    }
    cmd = [
        '"$TOOL" x $SRCS_JDK -o extract_dir',
        "mv $(dirname $(dirname $(find extract_dir/ -name javac))) $OUTS",
        "chmod +x $OUTS/bin/*",
    ]

    if jmod_includes:
        srcs["jmod_includes"] = []
        cmd += ["mkdir -p _jmods"]
        for module, includes in jmod_includes.items():
            srcs["jmod_includes"] += includes.values()
            cmd += [f"$OUTS/bin/jmod extract --dir _jmods/{module} $OUTS/jmods/{module}.jmod"]
            for fdest, fsrc in includes.items():
                fsrc = f"$(location {fsrc})" if looks_like_build_label(fsrc) else fsrc
                cmd += [f"cp -a {fsrc} _jmods/{module}/{fdest}"]
            cmd += [
                f"rm -f $OUTS/jmods/{module}.jmod",
                # jlink will exit unsuccessfully if any of the directories given in the options are missing,
                # but is fine with them being empty:
                f"for dir in classes bin conf include legal lib man; do mkdir -p _jmods/{module}/$dir; done",
                "$OUTS/bin/jmod create " + " ".join([
                    f"--class-path _jmods/{module}/classes",
                    f"--cmds _jmods/{module}/bin",
                    f"--config _jmods/{module}/conf",
                    f"--header-files _jmods/{module}/include",
                    f"--legal-notices _jmods/{module}/legal",
                    f"--libs _jmods/{module}/lib",
                    f"--man-pages _jmods/{module}/man",
                ]) + f" $OUTS/jmods/{module}.jmod",
                # Some JMOD archives in the JDK are large when extracted, so clean them up as we go along:
                f"rm -rf _jmods/{module}",
            ]

    return genrule(
        name = name,
        srcs = srcs,
        outs = [name],
        binary = True,
        cmd = cmd + [
            "$OUTS/bin/java -fullversion 2>&1",
        ],
        tools = [CONFIG.JARCAT_TOOL],
        entry_points = {
            "java": f"{name}/bin/java",
            "javac": f"{name}/bin/javac",
        },
        labels = labels,
        post_build = _add_jlink_entry_point,
        visibility = visibility,
    )

please_java_toolchain = _java_toolchain

def java_toolchain(name:str, jdk_url:str|dict="", jdk:str="", hashes:list=[], jmod_includes:dict={},
                   visibility:list=["PUBLIC"]):
    """This is an experimental feature and is subject to breaking changes in minor releases.

    Defines a toolchain that downloads a JDK that can be used with java languages rules. This can be configured in your
    .plzconfig via the config option java.toolchain.

    This rule is aliased please_java_toolchain as well. When Bazel compatibility is enabled, this alias must be used
    instead.

    Args:
      name (str): Name of the rule.
      jdk_url (str): A URL to an archive containing a JDK distribution. Either this or jdk should be provided.
      jdk (str): An archive of a jdk distribution or a label of a rule that produces one. Either this or jdk_url should
                 be provided.
      hashes (list[str]): A list of valid hashes for the produced rule.
      jmod_includes (dict[dict[str, str]]): Additional files to insert into the JDK's JMOD archive files in the jmod/
                                            directory. Keys are the names of archives without the .jmod extension (e.g.
                                            "java.base"), and values are dicts mapping paths within the archive to the
                                            files or build targets that provide them.
      visibility (list[str]): Visibility of this rule. Defaults to PUBLIC.
    """
    return _java_toolchain(
        name = name,
        jdk_url = jdk_url,
        jdk = jdk,
        hashes = hashes,
        jmod_includes = jmod_includes,
        visibility = visibility,
    )

if CONFIG.BAZEL_COMPATIBILITY:
    def bazel_java_toolchain(javac=None, source_version=None, target_version=None):
        """Mimics some effort at Bazel compatibility.

        This doesn't really have the same semantics and ignores a bunch of arguments but it
        isn't easy for us to behave the same way that they do.
        """
        return package(
            javac_tool = javac,
            java_source_level = source_version,
            java_target_level = target_version,
        )

    java_toolchain = bazel_java_toolchain

    def java_import(name, jars, deps=None, exports=None, test_only=False, visibility=None):
        """Mimics java_import, as far as I can tell we don't need to do much here."""
        return filegroup(
            name = name,
            srcs = jars,
            deps = deps,
            exported_deps = exports,
            test_only = test_only,
            visibility = visibility,
        )

